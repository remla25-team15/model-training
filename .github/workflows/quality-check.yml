name: Test and Quality Check

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  GDRIVE_FOLDER_NAME: Model-releases

jobs:
  quality-check:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Create necessary directories
        run: |
          mkdir -p secrets
          mkdir -p coverage_reports
          mkdir -p test_reports

      - name: Write GDrive SA key (if available)
        run: |
          echo '${{ secrets.GDRIVE_SA_KEY }}' > secrets/sa_key.json

      - name: Pull DVC data (if SA key available)
        run: |
          dvc pull -v || echo "DVC pull failed, continuing without remote data"
        continue-on-error: true

      - name: Run DVC pipeline (if SA key available)
        run: |
          dvc repro || echo "DVC repro failed, continuing with existing models"
        continue-on-error: true

      - name: Run pylint and save score
        run: |
          pylint_output=$(pylint src/ --reports=y || true)
          echo "$pylint_output"
          # Extract pylint score from the output, e.g. "Your code has been rated at 8.45/10"
          score=$(echo "$pylint_output" | grep "Your code has been rated at" | sed -E 's/.*rated at ([0-9\.]+)\/10.*/\1/')
          echo "{\"score\": $score}" > test_reports/pylint_score.json

      - name: Run tests with coverage
        run: |
          pytest tests/ \
            --cov=src \
            --cov-report=xml:coverage.xml \
            --cov-report=json:test_reports/coverage.json \
            --cov-report=html:coverage_reports/html \
            --cov-report=term \
            --junit-xml=test_reports/junit.xml \
            -v

      - name: Calculate ML Test Score
        run: |
          python scripts/ml_test_score.py test_reports/junit.xml test_reports/ml_test_score.json

      - name: Update README with badges
        run: |
          python scripts/update_readme.py README.md

      - name: Commit test reports and README updates
        if: github.event_name == 'push'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md test_reports/ coverage_reports/ coverage.xml
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update README and test reports with automated quality metrics [skip ci]"
            git push
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            test_reports/
            coverage_reports/
            coverage.xml

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            coverage.xml
            test_reports/coverage.json
            coverage_reports/
